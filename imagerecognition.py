# -*- coding: utf-8 -*-
"""ImageRecognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dP2MaSyoYMCeKhvNfEk8_RTPTEl4xHVQ
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from matplotlib import pyplot as plt
from torchvision import transforms, models
import os
import pandas as pd
from PIL import Image
import numpy as np
from torch.autograd import Variable


device = torch.device('cpu') # cuda


# load food item images dataset
cwd = os.getcwd()
data_path = os.path.join(cwd, 'data/GroceryStoreDataset-master/dataset/train.txt')
df = pd.read_csv(data_path, delimiter = ',', names=["path", "precision", "name"])
df2 = pd.read_csv(data_path, delimiter = ',', names=["path", "precision", "name"])

img_path = os.path.join(cwd, 'data/GroceryStoreDataset-master/dataset/')

train_x = []
train_y = []
for row in df['path'].values:
    img_path2 = img_path + row
    image = Image.open(img_path2)
    image = transforms.ToTensor()(image).unsqueeze(0)
    image = image[:,:,0:348,0:348]
    train_x.append(image)
    target = row.split('/')[2]
    train_y.append(target)

x_train = torch.stack(train_x)
y_train = train_y


test_x = []
test_y = []
for row in df2['path'].values:
    img_path2 = img_path + row
    image = Image.open(img_path2)
    image = transforms.ToTensor()(image).unsqueeze(0)
    image = image[:,:,0:348,0:348]
    test_x.append(image)
    target = row.split('/')[2]
    test_y.append(target)

x_test = torch.stack(test_x)
y_test = torch.stack(test_y)


# Let's define a network

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        
        self.net = nn.Sequential()
        #activation map of size 1x3x348x348
        self.net.add_module('cv1', nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, stride=1, padding=0, dilation=1))
        #activation map of size Bx32x346x346
        self.net.add_module('rl1', nn.ReLU())
        #activation map of size Bx32x346x346
        self.net.add_module('mp1', nn.MaxPool2d(kernel_size=2, stride=None, padding=0, dilation=1))
        #activation map of size Bx32x173x173
        self.net.add_module('cv2', nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=1, padding=0, dilation=1))
        #activation map of size Bx64x171x171
        self.net.add_module('rl2', nn.ReLU())
        #activation map of size Bx64x171x171
        self.net.add_module('mp2', nn.MaxPool2d(kernel_size=2, stride=None, padding=0, dilation=1))
        #input size Bx64x86x86
        self.net.add_module('dp1', nn.Dropout2d(p=0.25))
        self.net.add_module('fl1', nn.Flatten())
        self.net.add_module('fc1', nn.Linear(in_features=473344, out_features=128))
        self.net.add_module('rl3', nn.ReLU())
        self.net.add_module('dp2', nn.Dropout(p=0.5))
        self.net.add_module('fc2', nn.Linear(in_features=128, out_features=10))
        self.net.add_module('sm1', nn.LogSoftmax(dim=1))

    def forward(self, x):
        return self.net(x)
    
model = Net().to(device)

# Let's define an optimizer

optimizer = optim.Adam(model.parameters(), lr=0.001)

# Let's define a Loss function

lossfun = nn.NLLLoss()  # Use nn.CrossEntropyLoss with softmax


# Let's train our model
'''
def train_model(model, criterion, optimizer, scheduler, num_epochs=25):
    since = time.time()

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch, num_epochs - 1))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['train', 'val']:
            if phase == 'train':
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                inputs = inputs.to(device)
                labels = labels.to(device)

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    outputs = model(inputs)
                    _, preds = torch.max(outputs, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)
            if phase == 'train':
                scheduler.step()

            epoch_loss = running_loss / dataset_sizes[phase]
            epoch_acc = running_corrects.double() / dataset_sizes[phase]

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())

        print()

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(
        time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model


model_ft = models.resnet18(pretrained=True)
num_ftrs = model_ft.fc.in_features
# Here the size of each output sample is set to 2.
# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).
model_ft.fc = nn.Linear(num_ftrs, 2)

model_ft = model_ft.to(device)

criterion = nn.CrossEntropyLoss()

# Observe that all parameters are being optimized
optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)

# Decay LR by a factor of 0.1 every 7 epochs
exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)

model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,
                       num_epochs=25)'''


def train(epoch):
    model.train()
    tr_loss = 0
    # getting the training set
    #x_train, y_train = torch.Tensor(train_x), torch.Tensor(train_y)
    # getting the validation set
    #x_test, y_test = torch.Tensor(test_x), torch.Tensor(test_y)
    print(x_train.size())
    print(y_train.size())
    # converting the data into GPU format
    if torch.cuda.is_available():
        x_train = x_train.cuda()
        y_train = y_train.cuda()
        x_test = x_test.cuda()
        y_test = y_test.cuda()

    # clearing the Gradients of the model parameters
    optimizer.zero_grad()
    
    # prediction for training and validation set
    output_train = model(x_train)
    output_val = model(x_test)

    # computing the training and validation loss
    loss_train = lossfun(output_train, y_train)
    loss_test = lossfun(output_val, y_test)
    train_losses.append(loss_train)
    test_losses.append(loss_test)

    # computing the updated weights of all the model parameters
    loss_train.backward()
    optimizer.step()
    tr_loss = loss_train.item()
    if epoch%2 == 0:
        # printing the validation loss
        print('Epoch : ',epoch+1, '\t', 'loss :', loss_test)


# defining the number of epochs
n_epochs = 25
# empty list to store training losses
train_losses = []
# empty list to store validation losses
val_losses = []
# training the model
for epoch in range(n_epochs):
    train(epoch)